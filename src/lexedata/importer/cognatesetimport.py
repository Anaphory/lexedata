from pathlib import Path
import typing as t

D = t.TypeVar("D", bound="CognateImporter")


class CognateImporter():
    # Database connection
    # CellParser interpret
    # ExcelParser (both Lexical and Cognate)
    # Path to excel files
    def __init__(self, database_path=None, echo=False, override=False, **kwargs):
        ...

    @classmethod
    def from_metadata(cls: t.Type[D], fname: Path) -> D:
        """
        Read a metadata.json file generated by guess_format.py
        Which therefore contains regular expressions to extract data from itself
        :param fname: path to metadata.json
        :return:
        """
        # from meta data read excel- and cellparser
        # set up database connection
        pass

    def from_excel_files(self, lexical, cognates) -> None:
        # calls all self.import_......
        ...

    def find_form(self, form: t.Dict[str, t.Any]) -> t.Optional(Form):
        """
        find Form described by the dictionary in  the database and return corresponding form object if found
        """


    # def import_language, def import_concepts, def import_cogsets

    def import_forms(self, lexical_file) -> None:
        """
        import all forms from excel into the database
        :return:
        """
        for form in self.excelparser.parse_cells():
            maybe_form = self.find_form(form)
            if maybe_form is None:
                # complete form dictionary with id,
                this_form = Form(cldf_id=this_id, **form)
                self.database.add(this_form)
            else:
                # do some warnings
                ...


    def import_judgements(self, lexical_files) -> None:
        """
        import all cognate judgements from excel into database
        :return:
        """
        for cognate_judgement in self.excelcognateparser.parse_cells():
            maybe_match = self.find_form(cognate_judgement)
            if maybe_match is None:
                #warnings
                ...
            else:
                # find id
                this_judgment = CognateJudgement(cldf_id=this_id, form=maybe_match, cognateset=cognate_judgement["cognateset"])
